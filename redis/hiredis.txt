1. 使用接口：
	/*连接数据库*/
	redisContext *redisConnect(const char *ip, int port);
	说明：
		port：为redis数据监听的端口号，redis默认监听的端口号为6379
		ip：为redis数据库的IP地址，可以是远程的，也可以是本地的127.0.0.1
		返回值：返回值是一个指向redisContext对象，可以不了解内部结构，但必须了解如何使用；
		truct redisContext {
			int err; /* Error flags, 0 when there is no error */
			char errstr[128]; /* String representation of error when applicable */
			int fd;
			int flags;
			char *obuf; /* Write buffer */
			redisReader *reader; /* Protocol reader */
			enum redisConnectionType connection_type;
			struct timeval *timeout;
			struct {
				char *host;
				char *source_addr;
				int port;
			} tcp;
			struct {
				char *path;
			} unix_sock;
		} redisContext;

	void *redisCommand(redisContext *c, const char *format, ...);
	说明：
		这个函数是一个带有不定参数的，可以按着format格式给出对应的参数，这就和printf函数类型；
		c是一个redisConnect函数返回的对象；
		返回值：返回值是一个void类型的指针，实际为指向一个redisReply类型的指针；
		/* This is the reply object returned by redisCommand() */
		typedef struct redisReply {
		    /*命令执行结果的返回类型*/
		    int type; /* REDIS_REPLY_* */
		    /*存储执行结果返回为整数*/
		    long long integer; /* The integer when type is REDIS_REPLY_INTEGER */
		    /*字符串值的长度*/
		    size_t len; /* Length of string */
		    /*存储命令执行结果返回是字符串*/
		    char *str; /* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */
		    /*返回结果是数组的大小*/
		    size_t elements; /* number of elements, for REDIS_REPLY_ARRAY */
		    /*存储执行结果返回是数组*/
		    struct redisReply **element; /* elements vector for REDIS_REPLY_ARRAY */
		} redisReply;
		{
				EDIS_REPLY_ARRAY == 2：返回值是数组，数组大小存在redis->elements里面，数组值存储在redis->element[i]里面。数组里面存储的是指向redisReply的指针，数组里面的返回值可以通过redis->element[i]->str来访问，数组的结果里全是type==REDIS_REPLY_STRING的redisReply对象指针。
				REDIS_REPLY_INTEGER == 3：返回值为整数 long long。
				REDIS_REPLY_NIL==4：返回值为空表示执行结果为空。
				REDIS_REPLY_STATUS ==5：返回命令执行的状态，比如set foo bar 返回的状态为OK，存储在str当中 reply->str == "OK"。
				REDIS_REPLY_ERROR ==6 ：命令执行错误,错误信息存放在 reply->str当中。
		}

	void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);
	说明：
		argvlen：这个数组存储了命令参数中，每一个参数的长度，包括命令本身；如果argvlen为空，那么这个函数内部会自动调用strlen函数对每个参数进行求长度；
		argv：存放每个命令参数的指针；
		argc：存放命令参数的个数；
		c为redisContext对象；
		为每一个参数指定长度，可以是二进制安全的函数。函数会按着长度来决定字符串的终止。而不是’\0‘;

	void redisAppendCommand(redisContext *c, const char *format, ...);
	void redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen);
	int redisGetReply(redisContext *context, redisReply** reply);
	说明：
		接口：获得执行的结果的一条返回，并存储在reply所指的对象当中。成功返回REDIS_OK，否则返回REDIS_ERR。多条命令的一次性返回结果都存放在redisContext里面；
		
	/*释放资源*/
	void freeReplyObject(void *reply);
	说明：
		这个函数会递归的释放数组中的资源，不需要手动释放数组资源；
	void redisFree(redisContext *c);
	说明：
		这个函数会清理连接资源 并释放连接；

[注意]
	1. redisContext不是线程安全的对象，也就是说，多个对象同时访问这一个对象可以会出现问题；
	
